{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Header.js\";\nimport React from 'react';\nimport { Link, RichText } from 'prismic-reactjs';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport Dropdown from './Dropdown';\n\nvar Header =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));\n    _this.state = {\n      doc: null,\n      notFound: false,\n      menuOpen: false\n    };\n\n    if (props.prismicCtx) {\n      _this.fetchPage(props);\n    }\n\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.props.prismicCtx.toolbar(); // We fetch the page only after it's ready to query the api\n\n      if (!prevProps.prismicCtx) {\n        this.fetchPage(this.props);\n      }\n    }\n  }, {\n    key: \"fetchPage\",\n    value: function fetchPage(props) {\n      var _this2 = this;\n\n      if (props.prismicCtx) {\n        // We use a single document query to get the only menu document\n        return props.prismicCtx.api.getSingle('menu', {}, function (err, doc) {\n          if (doc) {\n            // We put the retrieved content in the state as a doc variable\n            _this2.setState({\n              doc: doc\n            });\n          } else {\n            // We changed the state to display error not found if no matched doc\n            _this2.setState({\n              notFound: !doc\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"menuLinks\",\n    value: function menuLinks() {\n      var _this3 = this;\n\n      return this.state.doc.data.menu_links.map(function (menuLink) {\n        //return < Sidebar/>;\n        return React.createElement(\"li\", {\n          key: menuLink.link.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: Link.url(menuLink.link, _this3.props.prismicCtx.linkResolver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, RichText.asText(menuLink.label)));\n      });\n    }\n  }, {\n    key: \"handleClickOutside\",\n    value: function handleClickOutside() {\n      this.setState({\n        listOpen: false\n      });\n    }\n  }, {\n    key: \"toggleList\",\n    value: function toggleList() {\n      this.setState(function (prevState) {\n        return {\n          listOpen: !prevState.listOpen\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.doc) {\n        return React.createElement(\"header\", {\n          className: \"site-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \"ReactJS Prismic Site\")), React.createElement(Dropdown, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }), React.createElement(\"navBar\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"dd-wrapper\",\n          onClick: function onClick() {\n            return _this4.toggleList();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"dd-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"dd-header-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        })), React.createElement(\"ul\", {\n          className: \"dd-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, this.menuLinks()))));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Header;\n}(React.Component);\n\nexport { Header as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Header.js"],"names":["React","Link","RichText","Navbar","Nav","NavItem","Dropdown","Header","props","state","doc","notFound","menuOpen","prismicCtx","fetchPage","prevProps","toolbar","api","getSingle","err","setState","data","menu_links","map","menuLink","link","id","url","linkResolver","asText","label","listOpen","prevState","toggleList","menuLinks","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link, RichText} from 'prismic-reactjs';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport Dropdown from './Dropdown'\nexport default class Header extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n      menuOpen: false,\n\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n    // We fetch the page only after it's ready to query the api\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    if (props.prismicCtx) {\n      // We use a single document query to get the only menu document\n      return props.prismicCtx.api.getSingle('menu', {}, (err, doc) => {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          this.setState({ doc });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          this.setState({ notFound: !doc });\n        }\n      });\n    }\n    return null;\n  }\n\n  menuLinks() {\n    return this.state.doc.data.menu_links.map((menuLink) => {\n      //return < Sidebar/>;\n      return (\n        <li key={menuLink.link.id}>\n          <a href={Link.url(menuLink.link, this.props.prismicCtx.linkResolver)}>\n            {RichText.asText(menuLink.label)}\n          </a>\n        </li>\n      );\n    });\n  }\n\n  handleClickOutside(){\n  this.setState({\n    listOpen: false\n  })\n}\n\ntoggleList(){\n  this.setState(prevState => ({\n    listOpen: !prevState.listOpen\n  }))\n}\n\n\n  render() {\n    if (this.state.doc) {\n      return (\n\n        <header className=\"site-header\">\n          <a href=\"/\">\n            <div className=\"logo\">ReactJS Prismic Site</div>\n          </a>\n <Dropdown />\n          <navBar>\n          <div className=\"dd-wrapper\"onClick={() => this.toggleList()}>\n            <div className=\"dd-header\">\n              <div className=\"dd-header-title\"></div>\n            </div>\n            <ul className=\"dd-list\">\n              {this.menuLinks()}\n            </ul>\n          </div>\n          </navBar>\n        </header>\n\n      );\n    } else {\n      return null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}