{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Documents.js\";\nimport React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\nimport { Link, RichText, Date } from 'prismic-reactjs';\n\nvar documents =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(documents, _React$Component);\n\n  function documents(props) {\n    var _this;\n\n    _classCallCheck(this, documents);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(documents).call(this, props));\n    _this.state = {\n      doc: null,\n      notFound: false,\n      posts: []\n    };\n\n    if (props.prismicCtx) {\n      _this.fetchPage(props);\n    }\n\n    return _this;\n  }\n\n  _createClass(documents, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.props.prismicCtx.toolbar();\n\n      if (!prevProps.prismicCtx) {\n        this.fetchPage(this.props);\n      }\n    }\n  }, {\n    key: \"fetchPage\",\n    value: function fetchPage(props) {\n      var _this2 = this;\n\n      // We are using the function to get single type document\n      return props.prismicCtx.api.getSingle('home_page').then(function (doc) {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          _this2.setState({\n            doc: doc\n          });\n\n          props.prismicCtx.api.query( // Get the document posts in descending order\n          PrismicAPP.Predicates.at('document.type', 'post'), {\n            orderings: '[my.post.date desc]'\n          }).then(function (res) {\n            _this2.setState({\n              posts: res.results\n            });\n          });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          _this2.setState({\n            notFound: !doc\n          });\n        }\n      });\n    }\n  }, {\n    key: \"firstParagraph\",\n    value: function firstParagraph(post) {\n      // Find the first text slice of post's body\n      var firstTextSlice = post.data.body.find(function (slice) {\n        return slice.slice_type === 'text';\n      });\n\n      if (firstTextSlice != null) {\n        // Set the character limit for the text we'll show in the homepage\n        var textLimit = 300;\n        var text = RichText.asText(firstTextSlice.primary.text);\n        var limitedText = text.substring(0, textLimit);\n\n        if (text.length > textLimit) {\n          // Cut only up to the last word and attach '...' for readability\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          }, limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...');\n        } else {\n          // If it's shorter than the limit, just show it normally\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, text);\n        }\n      } else {\n        // If there are no slices of type 'text', return nothing\n        return null;\n      }\n    }\n  }, {\n    key: \"documentPostsSection\",\n    value: function documentPostsSection() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"document-main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.state.posts.map(function (post) {\n        /* Store the date as a Date object so we can format it to whatever we need */\n        var postDate = Date(post.data.date);\n        /* Default title when post has no title set */\n\n        var defaultTitle = [React.createElement(\"h1\", {\n          key: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Untitled\")];\n        return React.createElement(\"div\", {\n          className: \"document-post\",\n          \"data-wio-id\": post.id,\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: _this3.props.prismicCtx.linkResolver(post),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, post.data.title.length !== 0 ? RichText.render(post.data.title, _this3.props.prismicCtx.linkResolver) : defaultTitle)), React.createElement(\"p\", {\n          className: \"document-post-meta\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"time\", {\n          className: \"created-at\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, postDate ? new Intl.DateTimeFormat('en-US', {\n          month: 'short',\n          day: '2-digit',\n          year: 'numeric'\n        }).format(postDate) : '')), _this3.firstParagraph(post));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.doc) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Helmet, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"title\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, RichText.asText(this.state.doc.data.headline))), this.documentPostsSection(), React.createElement(Footer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      } else if (this.state.notFound) {\n        return React.createElement(NotFound, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return documents;\n}(React.Component);\n\nexport { documents as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Documents.js"],"names":["React","NotFound","SliceZone","Header","Footer","Loader","Link","RichText","Date","documents","props","state","doc","notFound","posts","prismicCtx","fetchPage","prevProps","toolbar","api","getSingle","then","setState","query","PrismicAPP","Predicates","at","orderings","res","results","post","firstTextSlice","data","body","find","slice","slice_type","textLimit","text","asText","primary","limitedText","substring","length","lastIndexOf","map","postDate","date","defaultTitle","id","linkResolver","title","render","Intl","DateTimeFormat","month","day","year","format","firstParagraph","headline","documentPostsSection","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,QAAqC,iBAArC;;IAEqBC,S;;;;;AACpB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,GAAG,EAAE,IADO;AAEZC,MAAAA,QAAQ,EAAE,KAFE;AAGZC,MAAAA,KAAK,EAAE;AAHK,KAAb;;AAKA,QAAIJ,KAAK,CAACK,UAAV,EAAsB;AACrB,YAAKC,SAAL,CAAeN,KAAf;AACA;;AATiB;AAUlB;;;;uCAEkBO,S,EAAW;AAC5B,WAAKP,KAAL,CAAWK,UAAX,CAAsBG,OAAtB;;AACA,UAAI,CAACD,SAAS,CAACF,UAAf,EAA2B;AAC1B,aAAKC,SAAL,CAAe,KAAKN,KAApB;AACA;AACF;;;8BAESA,K,EAAO;AAAA;;AACd;AACA,aAAOA,KAAK,CAACK,UAAN,CAAiBI,GAAjB,CAAqBC,SAArB,CAA+B,WAA/B,EAA4CC,IAA5C,CAAiD,UAAAT,GAAG,EAAI;AAC7D,YAAIA,GAAJ,EAAS;AACP;AACA,UAAA,MAAI,CAACU,QAAL,CAAc;AAAEV,YAAAA,GAAG,EAAHA;AAAF,WAAd;;AACAF,UAAAA,KAAK,CAACK,UAAN,CAAiBI,GAAjB,CAAqBI,KAArB,EACC;AACAC,UAAAA,UAAU,CAACC,UAAX,CAAsBC,EAAtB,CAAyB,eAAzB,EAA0C,MAA1C,CAFD,EAGC;AAACC,YAAAA,SAAS,EAAG;AAAb,WAHD,EAIEN,IAJF,CAIO,UAAAO,GAAG,EAAI;AACb,YAAA,MAAI,CAACN,QAAL,CAAc;AAACR,cAAAA,KAAK,EAAEc,GAAG,CAACC;AAAZ,aAAd;AACA,WAND;AAOD,SAVD,MAUO;AACL;AACA,UAAA,MAAI,CAACP,QAAL,CAAc;AAAET,YAAAA,QAAQ,EAAE,CAACD;AAAb,WAAd;AACD;AACF,OAfM,CAAP;AAgBF;;;mCAEckB,I,EAAM;AACpB;AACA,UAAIC,cAAc,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAeC,IAAf,CAAoB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,UAAN,KAAqB,MAAzB;AAAA,OAAzB,CAArB;;AACA,UAAIL,cAAc,IAAI,IAAtB,EAA4B;AAC3B;AACA,YAAMM,SAAS,GAAG,GAAlB;AACA,YAAIC,IAAI,GAAG/B,QAAQ,CAACgC,MAAT,CAAgBR,cAAc,CAACS,OAAf,CAAuBF,IAAvC,CAAX;AACA,YAAIG,WAAW,GAAGH,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBL,SAAlB,CAAlB;;AAEA,YAAIC,IAAI,CAACK,MAAL,GAAcN,SAAlB,EAA6B;AAC5B;AACA,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAII,WAAW,CAACC,SAAZ,CAAsB,CAAtB,EAAyBD,WAAW,CAACG,WAAZ,CAAwB,GAAxB,CAAzB,IAAyD,KAA7D,CADD;AAGA,SALD,MAKO;AACN;AACA,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAIN,IAAJ,CAAP;AACA;AACD,OAfD,MAeO;AACN;AACA,eAAO,IAAP;AACA;AAED;;;2CAEsB;AAAA;;AACtB,aACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,KAAK3B,KAAL,CAAWG,KAAX,CAAiB+B,GAAjB,CAAqB,UAACf,IAAD,EAAU;AAC/B;AACA,YAAIgB,QAAQ,GAAGtC,IAAI,CAACsB,IAAI,CAACE,IAAL,CAAUe,IAAX,CAAnB;AACA;;AACA,YAAMC,YAAY,GAAG,CAAC;AAAI,UAAA,GAAG,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAD,CAArB;AACA,eACC;AAAK,UAAA,SAAS,EAAC,eAAf;AAA+B,yBAAalB,IAAI,CAACmB,EAAjD;AAAqD,UAAA,GAAG,EAAEnB,IAAI,CAACmB,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEC;AAAG,UAAA,IAAI,EAAE,MAAI,CAACvC,KAAL,CAAWK,UAAX,CAAsBmC,YAAtB,CAAmCpB,IAAnC,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACEA,IAAI,CAACE,IAAL,CAAUmB,KAAV,CAAgBR,MAAhB,KAA2B,CAA3B,GAA+BpC,QAAQ,CAAC6C,MAAT,CAAgBtB,IAAI,CAACE,IAAL,CAAUmB,KAA1B,EAAiC,MAAI,CAACzC,KAAL,CAAWK,UAAX,CAAsBmC,YAAvD,CAA/B,GAAsGF,YADxG,CAFD,CADD,EAOC;AAAG,UAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAM,UAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEEF,QAAQ,GAAG,IAAIO,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AAC5CC,UAAAA,KAAK,EAAE,OADqC;AAE5CC,UAAAA,GAAG,EAAE,SAFuC;AAG5CC,UAAAA,IAAI,EAAE;AAHsC,SAAjC,EAITC,MAJS,CAIFZ,QAJE,CAAH,GAIa,EANvB,CADD,CAPD,EAkBC,MAAI,CAACa,cAAL,CAAoB7B,IAApB,CAlBD,CADD;AAsBA,OA3BA,CAFF,CADD;AAiCA;;;6BAEQ;AACR,UAAI,KAAKnB,KAAL,CAAWC,GAAf,EAAoB;AACnB,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAQL,QAAQ,CAACgC,MAAT,CAAgB,KAAK5B,KAAL,CAAWC,GAAX,CAAeoB,IAAf,CAAoB4B,QAApC,CAAR,CADD,CADD,EAIE,KAAKC,oBAAL,EAJF,EAKC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALD,CADD;AASA,OAVD,MAUO,IAAI,KAAKlD,KAAL,CAAWE,QAAf,EAAyB;AAC/B,eAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AACD,aAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA;;;;EApHqCb,KAAK,CAAC8D,S;;SAAxBrD,S","sourcesContent":["import React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\nimport { Link, RichText, Date } from 'prismic-reactjs'\n\nexport default class documents extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdoc: null,\n\t\t\tnotFound: false,\n\t\t\tposts: [],\n\t\t}\n\t\tif (props.prismicCtx) {\n\t\t\tthis.fetchPage(props);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t  this.props.prismicCtx.toolbar();\n\t  if (!prevProps.prismicCtx) {\n\t  \tthis.fetchPage(this.props);\n\t  }\n\t}\n\n\tfetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('home_page').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({ doc });\n        props.prismicCtx.api.query(\n        \t// Get the document posts in descending order\n        \tPrismicAPP.Predicates.at('document.type', 'post'),\n        \t{orderings : '[my.post.date desc]'}\n        ).then(res => {\n        \tthis.setState({posts: res.results});\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({ notFound: !doc });\n      }\n    });\n\t}\n\n\tfirstParagraph(post) {\n\t\t// Find the first text slice of post's body\n\t\tlet firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text');\n\t\tif (firstTextSlice != null) {\n\t\t\t// Set the character limit for the text we'll show in the homepage\n\t\t\tconst textLimit = 300;\n\t\t\tlet text = RichText.asText(firstTextSlice.primary.text);\n\t\t\tlet limitedText = text.substring(0, textLimit);\n\n\t\t\tif (text.length > textLimit) {\n\t\t\t\t// Cut only up to the last word and attach '...' for readability\n\t\t\t\treturn (\n\t\t\t\t\t<p>{limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...'}</p>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// If it's shorter than the limit, just show it normally\n\t\t\t\treturn <p>{text}</p>;\n\t\t\t}\n\t\t} else {\n\t\t\t// If there are no slices of type 'text', return nothing\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tdocumentPostsSection() {\n\t\treturn (\n\t\t\t<div className=\"document-main\">\n\t\t\t\t{/* Working from the array of all document posts, we process each one */}\n\t\t\t\t{this.state.posts.map((post) => {\n\t\t\t\t\t/* Store the date as a Date object so we can format it to whatever we need */\n\t\t\t\t\tlet postDate = Date(post.data.date);\n\t\t\t\t\t/* Default title when post has no title set */\n\t\t\t\t\tconst defaultTitle = [<h1 key=\"title\">Untitled</h1>]\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"document-post\" data-wio-id={post.id} key={post.id} >\n\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\t{/* We render a link to a particular post using the linkResolver for the url and its title */}\n\t\t\t\t\t\t\t\t<a href={this.props.prismicCtx.linkResolver(post)}>\n\t\t\t\t\t\t\t\t\t{post.data.title.length !== 0 ? RichText.render(post.data.title, this.props.prismicCtx.linkResolver) : defaultTitle}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"document-post-meta\">\n\t\t\t\t\t\t\t\t<time className=\"created-at\">\n\t\t\t\t\t\t\t\t\t{/* Format the date to M d, Y */}\n\t\t\t\t\t\t\t\t\t{postDate ? new Intl.DateTimeFormat('en-US', {\n\t\t\t\t\t\t\t\t\t\tmonth: 'short',\n\t\t\t\t\t\t\t\t\t\tday: '2-digit',\n\t\t\t\t\t\t\t\t\t\tyear: 'numeric'\n\t\t\t\t\t\t\t\t\t}).format(postDate) : ''}\n\t\t\t\t\t\t\t\t</time>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t{/* Renders a small preview of the post's text */}\n\t\t\t\t\t\t{this.firstParagraph(post)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tif (this.state.doc) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t<title>{RichText.asText(this.state.doc.data.headline)}</title>\n\t\t\t\t\t</Helmet>\n\t\t\t\t\t{this.documentPostsSection()}\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else if (this.state.notFound) {\n\t\t\treturn <NotFound />;\n\t\t}\n\t\treturn <Loader />;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}