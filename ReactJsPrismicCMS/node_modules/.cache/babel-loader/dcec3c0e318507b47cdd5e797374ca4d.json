{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Header.js\";\nimport React from 'react';\nimport { Link, RichText } from 'prismic-reactjs';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap'; //import Dropdown from './Dropdown'\n\nvar Header =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));\n\n    _this.handleButtonClick = function () {\n      _this.setState(function (state) {\n        return {\n          open: !state.open\n        };\n      });\n    };\n\n    _this.state = {\n      doc: null,\n      notFound: false,\n      menuOpen: false,\n      open: false\n    };\n\n    if (props.prismicCtx) {\n      _this.fetchPage(props);\n    }\n\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.props.prismicCtx.toolbar(); // We fetch the page only after it's ready to query the api\n\n      if (!prevProps.prismicCtx) {\n        this.fetchPage(this.props);\n      }\n    }\n  }, {\n    key: \"fetchPage\",\n    value: function fetchPage(props) {\n      var _this2 = this;\n\n      if (props.prismicCtx) {\n        // We use a single document query to get the only menu document\n        return props.prismicCtx.api.getSingle('menu', {}, function (err, doc) {\n          if (doc) {\n            // We put the retrieved content in the state as a doc variable\n            _this2.setState({\n              doc: doc\n            });\n          } else {\n            // We changed the state to display error not found if no matched doc\n            _this2.setState({\n              notFound: !doc\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"menuLinks\",\n    value: function menuLinks() {\n      var _this3 = this;\n\n      return this.state.doc.data.menu_links.map(function (menuLink) {\n        //return < Sidebar/>;\n        return React.createElement(\"li\", {\n          key: menuLink.link.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: Link.url(menuLink.link, _this3.props.prismicCtx.linkResolver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, RichText.asText(menuLink.label)));\n      });\n    }\n  }, {\n    key: \"handleClickOutside\",\n    value: function handleClickOutside() {\n      this.setState({\n        listOpen: false\n      });\n    }\n  }, {\n    key: \"toggleList\",\n    value: function toggleList() {\n      this.setState(function (prevState) {\n        return {\n          listOpen: !prevState.listOpen\n        };\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"mousedown\", this.handleClickOutside);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"mousedown\", this.handleClickOutside);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        ref: this.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        class: \"button\",\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"\\u2630\"), this.state.open && React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.menuLinks()))));\n    }\n  }]);\n\n  return Header;\n}(React.Component); //render() {\n//     if (this.state.doc) {\n//       return (\n//\n//         <header className=\"site-header\">\n//           <a href=\"/\">\n//             <div className=\"logo\">ReactJS Prismic Site</div>\n//           </a>\n//\n//\n//           <div>\n//             <select>\n//             <\n//               {this.menuLinks()}\n//             </select>\n//             </div>\n//\n//         </header>\n//\n//       );\n//     } else {\n//       return null\n//     }\n//   }\n// }\n\n\nexport { Header as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/ReactJsPrismicCMS/src/components/Header.js"],"names":["React","Link","RichText","Navbar","Nav","NavItem","Header","props","handleButtonClick","setState","state","open","doc","notFound","menuOpen","prismicCtx","fetchPage","prevProps","toolbar","api","getSingle","err","data","menu_links","map","menuLink","link","id","url","linkResolver","asText","label","listOpen","prevState","document","addEventListener","handleClickOutside","removeEventListener","container","menuLinks","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link, RichText} from 'prismic-reactjs';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\n//import Dropdown from './Dropdown'\nexport default class Header extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n      menuOpen: false,\n       open: false,\n\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n    // We fetch the page only after it's ready to query the api\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    if (props.prismicCtx) {\n      // We use a single document query to get the only menu document\n      return props.prismicCtx.api.getSingle('menu', {}, (err, doc) => {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          this.setState({ doc });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          this.setState({ notFound: !doc });\n        }\n      });\n    }\n    return null;\n  }\n\n  menuLinks() {\n    return this.state.doc.data.menu_links.map((menuLink) => {\n      //return < Sidebar/>;\n      return (\n        <li key={menuLink.link.id}>\n          <a href={Link.url(menuLink.link, this.props.prismicCtx.linkResolver)}>\n            {RichText.asText(menuLink.label)}\n          </a>\n        </li>\n      );\n    });\n  }\n\n  handleClickOutside(){\n  this.setState({\n    listOpen: false\n  })\n}\n\ntoggleList(){\n  this.setState(prevState => ({\n    listOpen: !prevState.listOpen\n  }))\n}\n\ncomponentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n  \n  handleButtonClick = () => {\n    this.setState(state => {\n      return {\n        open: !state.open,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\" ref={this.container}>\n          <button type=\"button\" class=\"button\" onClick={this.handleButtonClick}>\n            ☰\n          </button>\n          {this.state.open && (\n            <div class=\"container\">\n              <ul>\n                {this.menuLinks()}\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n  //render() {\n//     if (this.state.doc) {\n//       return (\n//\n//         <header className=\"site-header\">\n//           <a href=\"/\">\n//             <div className=\"logo\">ReactJS Prismic Site</div>\n//           </a>\n//\n//\n//           <div>\n//             <select>\n//             <\n//               {this.menuLinks()}\n//             </select>\n//             </div>\n//\n//         </header>\n//\n//       );\n//     } else {\n//       return null\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}