{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/src/Document.js\";\nimport React from 'react';\nimport NotFound from './NotFound';\nimport PrismicReact from 'prismic-reactjs';\n\nvar Document =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Document, _React$Component);\n\n  function Document() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Document);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Document)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      doc: null,\n      notFound: false\n    };\n    return _this;\n  }\n\n  _createClass(Document, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.fetchDocument(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.fetchDocument(props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.props.prismicCtx.toolbar();\n    }\n  }, {\n    key: \"fetchDocument\",\n    value: function fetchDocument(props) {\n      var _this2 = this;\n\n      if (props.prismicCtx) {\n        // We are using the function to get a document by its uid\n        return props.prismicCtx.api.getByUID('document', props.match.params.uid, {}, function (err, doc) {\n          if (doc) {\n            // We put the retrieved content in the state as a doc variable\n            _this2.setState({\n              doc: doc\n            });\n          } else {\n            // We changed the state to display error not found if no matched doc\n            _this2.setState({\n              notFound: !doc\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.doc) {\n        return React.createElement(\"div\", {\n          \"data-wio-id\": this.state.doc.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, PrismicReact.RichText.asText(this.state.doc.data.title)), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, PrismicReact.RichText.asText(this.state.doc.data.documentbody)));\n      } else if (this.state.notFound) {\n        return React.createElement(NotFound, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Loading\");\n    }\n  }]);\n\n  return Document;\n}(React.Component);\n\nexport { Document as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/src/Document.js"],"names":["React","NotFound","PrismicReact","Document","state","doc","notFound","fetchDocument","props","prismicCtx","toolbar","api","getByUID","match","params","uid","err","setState","id","RichText","asText","data","title","documentbody","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;IAEqBC,Q;;;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;AACNC,MAAAA,GAAG,EAAE,IADC;AAENC,MAAAA,QAAQ,EAAE;AAFJ,K;;;;;;yCAKa;AACnB,WAAKC,aAAL,CAAmB,KAAKC,KAAxB;AACD;;;8CAEyBA,K,EAAO;AAC/B,WAAKD,aAAL,CAAmBC,KAAnB;AACD;;;yCAEoB;AACnB,WAAKA,KAAL,CAAWC,UAAX,CAAsBC,OAAtB;AACD;;;kCAEaF,K,EAAO;AAAA;;AACnB,UAAIA,KAAK,CAACC,UAAV,EAAsB;AACpB;AACA,eAAOD,KAAK,CAACC,UAAN,CAAiBE,GAAjB,CAAqBC,QAArB,CAA8B,UAA9B,EAA0CJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,GAA7D,EAAkE,EAAlE,EAAsE,UAACC,GAAD,EAAMX,GAAN,EAAc;AACzF,cAAIA,GAAJ,EAAS;AACP;AACA,YAAA,MAAI,CAACY,QAAL,CAAc;AAAEZ,cAAAA,GAAG,EAAHA;AAAF,aAAd;AACD,WAHD,MAGO;AACL;AACA,YAAA,MAAI,CAACY,QAAL,CAAc;AAAEX,cAAAA,QAAQ,EAAE,CAACD;AAAb,aAAd;AACD;AACF,SARM,CAAP;AASD;;AACD,aAAO,IAAP;AACD;;;6BAEQ;AACT,UAAI,KAAKD,KAAL,CAAWC,GAAf,EAAoB;AAClB,eACE;AAAK,yBAAa,KAAKD,KAAL,CAAWC,GAAX,CAAea,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKhB,YAAY,CAACiB,QAAb,CAAsBC,MAAtB,CAA6B,KAAKhB,KAAL,CAAWC,GAAX,CAAegB,IAAf,CAAoBC,KAAjD,CAAL,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIpB,YAAY,CAACiB,QAAb,CAAsBC,MAAtB,CAA6B,KAAKhB,KAAL,CAAWC,GAAX,CAAegB,IAAf,CAAoBE,YAAjD,CAAJ,CANF,CADF;AAUD,OAXD,MAWO,IAAI,KAAKnB,KAAL,CAAWE,QAAf,EAAyB;AAC9B,eAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAEC;;;;EApDmCN,KAAK,CAACwB,S;;SAAvBrB,Q","sourcesContent":["import React from 'react';\nimport NotFound from './NotFound';\nimport PrismicReact from 'prismic-reactjs';\n\nexport default class Document extends React.Component {\n\n  state = {\n    doc: null,\n    notFound: false,\n  }\n\n  componentWillMount() {\n    this.fetchDocument(this.props);\n  }\n\n  componentWillReceiveProps(props) {\n    this.fetchDocument(props);\n  }\n\n  componentDidUpdate() {\n    this.props.prismicCtx.toolbar();\n  }\n\n  fetchDocument(props) {\n    if (props.prismicCtx) {\n      // We are using the function to get a document by its uid\n      return props.prismicCtx.api.getByUID('document', props.match.params.uid, {}, (err, doc) => {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          this.setState({ doc });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          this.setState({ notFound: !doc });\n        }\n      });\n    }\n    return null;\n  }\n\n  render() {\n  if (this.state.doc) {\n    return (\n      <div data-wio-id={this.state.doc.id}>\n\n        {/* This is how to insert a Rich Text field as plain text */}\n        <h1>{PrismicReact.RichText.asText(this.state.doc.data.title)}</h1>\n        {/* This is how to insert a Rich Text field into your template as html */}\n        \n        <p>{PrismicReact.RichText.asText(this.state.doc.data.documentbody)}</p>\n      </div>\n    );\n  } else if (this.state.notFound) {\n    return <NotFound />;\n  }\n  return <h1>Loading</h1>;\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}