{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/src/components/Documents.js\";\nimport React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\nimport { Link, RichText, Date } from 'prismic-reactjs';\n\nvar documents =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(documents, _React$Component);\n\n  function documents(props) {\n    var _this;\n\n    _classCallCheck(this, documents);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(documents).call(this, props));\n    _this.state = {\n      doc: null,\n      notFound: false,\n      documents: []\n    };\n\n    if (props.prismicCtx) {\n      _this.fetchPage(props);\n    }\n\n    return _this;\n  }\n\n  _createClass(documents, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(props) {\n      this.props.prismicCtx.toolbar();\n\n      if (!props.prismicCtx) {\n        this.fetchPage(this.props);\n      }\n    }\n  }, {\n    key: \"fetchPage\",\n    value: function fetchPage(props) {\n      var _this2 = this;\n\n      if (props.prismicCtx) {\n        // We are using the function to get a document by its uid\n        return props.prismicCtx.api.getByUID('documents', props.match.params.uid, {}, function (err, doc) {\n          if (doc) {\n            // We put the retrieved content in the state as a doc variable\n            _this2.setState({\n              doc: doc\n            });\n          } else {\n            // We changed the state to display error not found if no matched doc\n            _this2.setState({\n              notFound: !doc\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.doc) {\n        return React.createElement(\"div\", {\n          className: \"document\",\n          \"data-wio-id\": this.state.doc.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(Header, {\n          prismicCtx: this.props.prismicCtx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(SliceZone, {\n          sliceZone: this.state.doc.data.page_content,\n          prismicCtx: this.props.prismicCtx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        })), React.createElement(Footer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      } else if (this.state.notFound) {\n        return React.createElement(NotFound, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return documents;\n}(React.Component);\n\nexport { documents as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/src/components/Documents.js"],"names":["React","NotFound","SliceZone","Header","Footer","Loader","Link","RichText","Date","documents","props","state","doc","notFound","prismicCtx","fetchPage","toolbar","api","getByUID","match","params","uid","err","setState","id","data","page_content","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,QAAqC,iBAArC;;IAEqBC,S;;;;;AACpB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,GAAG,EAAE,IADO;AAEZC,MAAAA,QAAQ,EAAE,KAFE;AAGZJ,MAAAA,SAAS,EAAE;AAHC,KAAb;;AAKA,QAAIC,KAAK,CAACI,UAAV,EAAsB;AACrB,YAAKC,SAAL,CAAeL,KAAf;AACA;;AATiB;AAUlB;;;;uCAEkBA,K,EAAO;AACxB,WAAKA,KAAL,CAAWI,UAAX,CAAsBE,OAAtB;;AACA,UAAI,CAACN,KAAK,CAACI,UAAX,EAAuB;AACtB,aAAKC,SAAL,CAAe,KAAKL,KAApB;AACA;AACF;;;8BAESA,K,EAAO;AAAA;;AACd,UAAIA,KAAK,CAACI,UAAV,EAAsB;AACpB;AACA,eAAOJ,KAAK,CAACI,UAAN,CAAiBG,GAAjB,CAAqBC,QAArB,CAA8B,WAA9B,EAA2CR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,GAA9D,EAAmE,EAAnE,EAAuE,UAACC,GAAD,EAAMV,GAAN,EAAc;AAC1F,cAAIA,GAAJ,EAAS;AACP;AACA,YAAA,MAAI,CAACW,QAAL,CAAc;AAAEX,cAAAA,GAAG,EAAHA;AAAF,aAAd;AACD,WAHD,MAGO;AACL;AACA,YAAA,MAAI,CAACW,QAAL,CAAc;AAAEV,cAAAA,QAAQ,EAAE,CAACD;AAAb,aAAd;AACD;AACF,SARM,CAAP;AASD;;AACD,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAI,KAAKD,KAAL,CAAWC,GAAf,EAAoB;AAClB,eACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,yBAAa,KAAKD,KAAL,CAAWC,GAAX,CAAeY,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AAAQ,UAAA,UAAU,EAAE,KAAKd,KAAL,CAAWI,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAE,KAAKH,KAAL,CAAWC,GAAX,CAAea,IAAf,CAAoBC,YAA1C;AAAwD,UAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWI,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAFF,EAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;AASD,OAVD,MAUO,IAAI,KAAKH,KAAL,CAAWE,QAAf,EAAyB;AAC9B,eAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAnDoCb,KAAK,CAAC2B,S;;SAAxBlB,S","sourcesContent":["import React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\nimport { Link, RichText, Date } from 'prismic-reactjs'\n\nexport default class documents extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdoc: null,\n\t\t\tnotFound: false,\n\t\t\tdocuments: [],\n\t\t}\n\t\tif (props.prismicCtx) {\n\t\t\tthis.fetchPage(props);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(props) {\n\t  this.props.prismicCtx.toolbar();\n\t  if (!props.prismicCtx) {\n\t  \tthis.fetchPage(this.props);\n\t  }\n\t}\n\n\tfetchPage(props) {\n    if (props.prismicCtx) {\n      // We are using the function to get a document by its uid\n      return props.prismicCtx.api.getByUID('documents', props.match.params.uid, {}, (err, doc) => {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          this.setState({ doc });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          this.setState({ notFound: !doc });\n        }\n      });\n    }\n    return null;\n  }\n\n  render() {\n    if (this.state.doc) {\n      return (\n        <div className=\"document\" data-wio-id={this.state.doc.id}>\n          <Header prismicCtx={this.props.prismicCtx} />\n          <div className=\"container\">\n            <SliceZone sliceZone={this.state.doc.data.page_content} prismicCtx={this.props.prismicCtx} />\n          </div>\n          <Footer />\n        </div>\n      );\n    } else if (this.state.notFound) {\n      return <NotFound />;\n    }\n    return <Loader />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}