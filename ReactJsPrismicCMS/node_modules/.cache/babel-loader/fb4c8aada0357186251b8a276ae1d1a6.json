{"ast":null,"code":"import _classCallCheck from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tom/Desktop/ReactJsPrismicCMS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tom/Desktop/ReactJsPrismicCMS/src/components/Page.js\";\nimport React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\n\nvar Page =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Page, _React$Component);\n\n  function Page(props) {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Page).call(this, props));\n    _this.state = {\n      doc: null,\n      notFound: false\n    };\n\n    if (props.prismicCtx) {\n      _this.fetchPage(props);\n    }\n\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.props.prismicCtx.toolbar();\n\n      if (!prevProps.prismicCtx) {\n        this.fetchPage(this.props);\n      }\n    }\n  }, {\n    key: \"fetchPage\",\n    value: function fetchPage(props) {\n      var _this2 = this;\n\n      if (props.prismicCtx) {\n        // We are using the function to get a document by its uid\n        return props.prismicCtx.api.getByUID('page', props.match.params.uid, {}, function (err, doc) {\n          if (doc) {\n            // We put the retrieved content in the state as a doc variable\n            _this2.setState({\n              doc: doc\n            });\n          } else {\n            // We changed the state to display error not found if no matched doc\n            _this2.setState({\n              notFound: !doc\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.doc) {\n        return React.createElement(\"div\", {\n          className: \"page\",\n          \"data-wio-id\": this.state.doc.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(Header, {\n          prismicCtx: this.props.prismicCtx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(SliceZone, {\n          sliceZone: this.state.doc.data.page_content,\n          prismicCtx: this.props.prismicCtx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        })), React.createElement(Footer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }));\n      } else if (this.state.notFound) {\n        return React.createElement(NotFound, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Page;\n}(React.Component);\n\nexport { Page as default };","map":{"version":3,"sources":["/Users/tom/Desktop/ReactJsPrismicCMS/src/components/Page.js"],"names":["React","NotFound","SliceZone","Header","Footer","Loader","Page","props","state","doc","notFound","prismicCtx","fetchPage","prevProps","toolbar","api","getByUID","match","params","uid","err","setState","id","data","page_content","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEqBC,I;;;;;AACnB,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,IADM;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;;AAIA,QAAIH,KAAK,CAACI,UAAV,EAAsB;AACpB,YAAKC,SAAL,CAAeL,KAAf;AACD;;AARe;AASjB;;;;uCAEkBM,S,EAAW;AAC5B,WAAKN,KAAL,CAAWI,UAAX,CAAsBG,OAAtB;;AACA,UAAI,CAACD,SAAS,CAACF,UAAf,EAA2B;AACzB,aAAKC,SAAL,CAAe,KAAKL,KAApB;AACD;AACF;;;8BAESA,K,EAAO;AAAA;;AACf,UAAIA,KAAK,CAACI,UAAV,EAAsB;AACpB;AACA,eAAOJ,KAAK,CAACI,UAAN,CAAiBI,GAAjB,CAAqBC,QAArB,CAA8B,MAA9B,EAAsCT,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBC,GAAzD,EAA8D,EAA9D,EAAkE,UAACC,GAAD,EAAMX,GAAN,EAAc;AACrF,cAAIA,GAAJ,EAAS;AACP;AACA,YAAA,MAAI,CAACY,QAAL,CAAc;AAAEZ,cAAAA,GAAG,EAAHA;AAAF,aAAd;AACD,WAHD,MAGO;AACL;AACA,YAAA,MAAI,CAACY,QAAL,CAAc;AAAEX,cAAAA,QAAQ,EAAE,CAACD;AAAb,aAAd;AACD;AACF,SARM,CAAP;AASD;;AACD,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAI,KAAKD,KAAL,CAAWC,GAAf,EAAoB;AAClB,eACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,yBAAa,KAAKD,KAAL,CAAWC,GAAX,CAAea,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AAAQ,UAAA,UAAU,EAAE,KAAKf,KAAL,CAAWI,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAE,KAAKH,KAAL,CAAWC,GAAX,CAAec,IAAf,CAAoBC,YAA1C;AAAwD,UAAA,UAAU,EAAE,KAAKjB,KAAL,CAAWI,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAFF,EAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;AASD,OAVD,MAUO,IAAI,KAAKH,KAAL,CAAWE,QAAf,EAAyB;AAC9B,eAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAlD+BV,KAAK,CAACyB,S;;SAAnBnB,I","sourcesContent":["import React from 'react';\nimport NotFound from './NotFound';\nimport SliceZone from './slices/SliceZone';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Loader from './Loader';\n\nexport default class Page extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    if (props.prismicCtx) {\n      // We are using the function to get a document by its uid\n      return props.prismicCtx.api.getByUID('page', props.match.params.uid, {}, (err, doc) => {\n        if (doc) {\n          // We put the retrieved content in the state as a doc variable\n          this.setState({ doc });\n        } else {\n          // We changed the state to display error not found if no matched doc\n          this.setState({ notFound: !doc });\n        }\n      });\n    }\n    return null;\n  }\n\n  render() {\n    if (this.state.doc) {\n      return (\n        <div className=\"page\" data-wio-id={this.state.doc.id}>\n          <Header prismicCtx={this.props.prismicCtx} />\n          <div className=\"container\">\n            <SliceZone sliceZone={this.state.doc.data.page_content} prismicCtx={this.props.prismicCtx} />\n          </div>\n          <Footer />\n        </div>\n      );\n    } else if (this.state.notFound) {\n      return <NotFound />;\n    }\n    return <Loader />;\n  }\n}"]},"metadata":{},"sourceType":"module"}